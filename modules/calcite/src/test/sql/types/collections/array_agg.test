# name: test/sql/types/collections/array_agg.test
# description: Test ARRAY_AGG and ARRAY_CONCAT_AGG function
# group: [collections]

# scalar ARRAY_AGG
query II
SELECT ARRAY_AGG(NULL), ARRAY_AGG(42)
----
[NULL]	[42]

# simple ARRAY_AGG
query I
SELECT ARRAY_AGG(i) FROM TABLE(SYSTEM_RANGE(0, 2)) TBL(i)
----
[0, 1, 2]

# empty ARRAY_AGG
query I
SELECT ARRAY_AGG(i) FROM TABLE(SYSTEM_RANGE(1, 0)) TBL(i)
----
NULL

# ARRAY_CONCAT_AGG with NULL
query I
SELECT ARRAY_CONCAT_AGG(a) FROM (SELECT ARRAY[1, 2, 3] UNION ALL SELECT NULL) T(a)
----
[1, 2, 3]

# ARRAY_CONCAT_AGG with ARRAY[NULL]
query I
SELECT ARRAY_CONCAT_AGG(a) FROM (SELECT ARRAY[1, 2, 3] UNION ALL SELECT ARRAY[NULL]) T(a)
----
[1, 2, 3, NULL]

# ARRAY_CONCAT_AGG with NULL array
query I
SELECT ARRAY_CONCAT_AGG(a) FROM (SELECT ARRAY[1, 2, 3] UNION ALL SELECT ARRAY_AGG(i) FROM TABLE(SYSTEM_RANGE(1, 0)) TBL(i)) T(a)
----
[1, 2, 3]

# ARRAY_CONCAT_AGG with empty array
query I
SELECT ARRAY_CONCAT_AGG(a) FROM (SELECT ARRAY(SELECT * FROM TABLE(SYSTEM_RANGE(1, 3))) UNION ALL SELECT ARRAY(SELECT * FROM TABLE(SYSTEM_RANGE(1, 0)))) T(a)
----
[1, 2, 3]

# empty ARRAY_CONCAT_AGG
query I
SELECT ARRAY_CONCAT_AGG(a) FROM (SELECT arr FROM (SELECT 1 AS id, ARRAY[1, 2, 3] AS arr) T(id, arr) WHERE id > 1) T1(a)
----
NULL

statement ok
CREATE TABLE T1 (a INTEGER, b INTEGER, c INTEGER);

statement ok
INSERT INTO T1 VALUES (11, 22, 1), (11, 10, 2), (12, 21, 3);

query T
SELECT ARRAY_AGG(b ORDER BY b) as c FROM T1 GROUP BY a ORDER BY a
----
[10, 22]
[21]